% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eval_glue.R
\name{eval_glue}
\alias{eval_glue}
\title{[!] Format, parse and evaluate expression in a string}
\usage{
eval_glue(..., envir = parent.frame(), .sep = "", .open = "{", .close = "}")
}
\arguments{
\item{...}{Strings to be formatted and evaluated as an expression.}

\item{envir}{[\code{environment}: \code{parent.frame()}]\cr Environment to evaluate each expression in. Expressions are
evaluated from left to right. If \code{.x} is an environment, the expressions are
evaluated in that environment and \code{.envir} is ignored. If \code{NULL} is passed it is equivalent to \code{\link[=emptyenv]{emptyenv()}}.}

\item{.sep}{[\code{character(1)}: \sQuote{""}]\cr Separator used to separate elements.}

\item{.open}{[\code{character(1)}: ‘\{’] \cr
The opening delimiter. Doubling the full delimiter escapes it.}

\item{.close}{[\code{character(1)}: ‘\}’] \cr
The closing delimiter. Doubling the full delimiter escapes it.}
}
\description{
A wrapper function to format and parse a string and evaluate it
as an expression. \code{eval_(X)} is a wrapper for
\code{eval(parse(text = glue::glue(X)))}.
}
\details{
It's a good practice to write backticks (`) arround variable names
to prevent from errors in situations, where variables have uncommon
names. See examples.
}
\examples{
library("spMisc")

AA <- "nn"

glue::glue("{AA} <- 3")

eval_glue("{AA} <- 3")

AA

nn

 # It's a good practice to write backticks (`) arround variable names
 # to prevent from errors in situations, where variables have uncommon
 # names:

BB <- "A B"

eval_glue("`{BB}` <- 8")

`A B`

}
\seealso{
Format and interpolate a string (\code{\link[glue]{glue}}).\cr
         Evaluate an (unevaluated) expression (\code{\link[base]{eval}}).\cr
         Parse expressions (\code{\link[base]{parse}}).
}
